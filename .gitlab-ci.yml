image: vikram03/node-java-chrome:0.1.0

variables:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: mybooks
  MYSQL_CI_URL: jdbc:mysql://mysql:3306/helpdesk?createDatabaseIfNotExist=true
  MYSQL_USER: root1
  MYSQL_PASSWORD: root1
  KARMA: "
let defaultConfFile = './src/karma.conf';

const karmaConfig = require(defaultConfFile);

module.exports = function(overridedConfig) {
  reporters = ['progress', 'junit'];

  browsers = ['ChromeHeadless'];

  customLaunchers = {
    ChromeHeadless: {
      base: 'Chrome',
      flags: [
        '--headless',
        '--disable-gpu',
        '--remote-debugging-port=9222',
        '--no-sandbox'
      ],
    }
  };

  junitReporter = {
    outputDir:  'reports/karma/',
    outputFile: 'karma-test-result.xml',
    suite: '',
    useBrowserName: false,
  };

  let mycfg = {
    set(val) {
      val.plugins = [
        require('karma-jasmine'),
        require('karma-chrome-launcher'),
        require('karma-jasmine-html-reporter'),
        require('karma-coverage-istanbul-reporter'),
        require('@angular-devkit/build-angular/plugins/karma'),
        require('karma-junit-reporter')
      ];

      val.reporters = reporters;
      val.junitReporter = junitReporter;
      val.browsers = browsers;
      val.customLaunchers = customLaunchers;
      val.singleRun = true;
      val.browserDisconnectTolerance = 1;
      val.browserNoActivityTimeout = 50000;

      overridedConfig.set(val);
    }
  };
  karmaConfig(mycfg);
}
"
  PROTRACTOR: "
const { SpecReporter } = require('jasmine-spec-reporter');
const JasmineReporter = require('jasmine-reporters');
let protractorConfig = require('./e2e/protractor.conf');
protractorConfig.config.specs = ['./e2e/**/*.e2e-spec.ts'];
protractorConfig.config.capabilities = {
  'browserName': 'chrome',
  chromeOptions: {
    args: ['--headless',
      '--disable-gpu',
      '--window-size=1024x768',
      'no-sandbox',
      '--disable-web-security'
    ]
  }
};
protractorConfig.config.onPrepareBase = protractorConfig.config.onPrepare;
protractorConfig.config.onPrepare = function() {
  protractorConfig.config.onPrepareBase();
  require('ts-node').register({
    project: 'e2e/tsconfig.e2e.json',
  });
  jasmine.getEnv().addReporter(new SpecReporter({ spec: { displayStacktrace: true } }));
  jasmine.getEnv().addReporter(new JasmineReporter.JUnitXmlReporter({
    savePath: 'reports/protractor/',
    consolidateAll: true,
    filePrefix: 'protractor-e2etest-result.xml'
  }))
};

effectiveProtractorConfig = protractorConfig;
module.exports = effectiveProtractorConfig;
"
  TSLINT: '{
  "rulesDirectory": [
    "codelyzer"
  ],
  "rules": {
    "arrow-return-shorthand": true,
    "callable-types": true,
    "class-name": true,
    "comment-format": [
      true,
      "check-space"
    ],
    "curly": true,
    "deprecation": {
      "severity": "warn"
    },
    "eofline": true,
    "forin": true,
    "import-blacklist": [
      true,
      "rxjs/Rx"
    ],
    "import-spacing": true,
    "indent": [
      true,
      "spaces"
    ],
    "interface-over-type-literal": true,
    "label-position": true,
    "max-line-length": [
      true,
      140
    ],
    "member-access": false,
    "member-ordering": [
      true,
      {
        "order": [
          "static-field",
          "instance-field",
          "static-method",
          "instance-method"
        ]
      }
    ],
    "no-arg": true,
    "no-bitwise": true,
    "no-console": [
      true,
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-empty": false,
    "no-empty-interface": true,
    "no-eval": true,
    "no-inferrable-types": [
      true,
      "ignore-params"
    ],
    "no-misused-new": true,
    "no-non-null-assertion": true,
    "no-redundant-jsdoc": true,
    "no-shadowed-variable": true,
    "no-string-literal": false,
    "no-string-throw": true,
    "no-switch-case-fall-through": true,
    "no-trailing-whitespace": true,
    "no-unnecessary-initializer": true,
    "no-unused-expression": true,
    "no-use-before-declare": true,
    "no-var-keyword": true,
    "object-literal-sort-keys": false,
    "one-line": [
      true,
      "check-open-brace",
      "check-catch",
      "check-else",
      "check-whitespace"
    ],
    "prefer-const": true,
    "quotemark": [
      true,
      "single"
    ],
    "radix": true,
    "semicolon": [
      true,
      "always"
    ],
    "triple-equals": [
      true,
      "allow-null-check"
    ],
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ],
    "unified-signatures": true,
    "variable-name": false,
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type"
    ],
    "no-output-on-prefix": true,
    "use-input-property-decorator": true,
    "use-output-property-decorator": true,
    "use-host-property-decorator": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "use-life-cycle-interface": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true
  }
}'
  PMD: '<?xml version="1.0"?>
        <!-- For more detailed description about rules, please refer https://pmd.github.io/latest/pmd-java/rules/index.html -->
        <ruleset name="All Java Rules"
            xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
            <description>Every Java Rule in PMD</description>
            <rule ref="rulesets/java/basic.xml" />
            <rule ref="rulesets/java/braces.xml"/>
            <rule ref="rulesets/java/clone.xml" />
            <rule ref="rulesets/java/codesize.xml" />
            <!-- <rule ref="rulesets/java/comments.xml"/> -->
            <rule ref="rulesets/java/controversial.xml" />
            <rule ref="rulesets/java/coupling.xml"/>
            <rule ref="rulesets/java/design.xml" />
            <!-- <rule ref="rulesets/java/empty.xml" /> -->
            <rule ref="rulesets/java/finalizers.xml" />
            <rule ref="rulesets/java/imports.xml"/>
            <rule ref="rulesets/java/j2ee.xml"/>
            <rule ref="rulesets/java/javabeans.xml" />
            <rule ref="rulesets/java/logging-java.xml" />
            <rule ref="rulesets/java/junit.xml" />
            <rule ref="rulesets/java/optimizations.xml" />
            <rule ref="rulesets/java/naming.xml"/>
            <rule ref="rulesets/java/optimizations.xml"/>
            <rule ref="rulesets/java/strictexception.xml"/>
            <rule ref="rulesets/java/strings.xml"/>
            <rule ref="rulesets/java/sunsecure.xml" />
            <rule ref="rulesets/java/strictexception.xml" />
            <rule ref="rulesets/java/typeresolution.xml" />
            <rule ref="rulesets/java/unnecessary.xml" />
            <rule ref="rulesets/java/unusedcode.xml" />
          </ruleset>'

services:
  - mysql:5.5

stages:
  - stage::build
  - tests
  - lint

# This job just to check the mysql connection
# connect:
#   image: mysql
#   stage: stage::build
#   tags:
#      - immersive
#   script:
#      - echo "SELECT 'OK';" | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql "$MYSQL_DATABASE"


#Build job config-server project to make sure no compile errors
build_configserver-build:
  stage: stage::build
  tags:
    - immersive
  when: always
  script: "mvn package -B -f ./config-server/ -DskipTests"

#Build job discovery-service project to make sure no compile errors
build_discoveryservice-build:
  stage: stage::build
  tags:
    - immersive
  when: always
  script: "mvn package -B -f ./discovery-service/ -DskipTests"

#Build job api-gateway project to make sure no compile errors
build_apigateway-build:
  stage: stage::build
  tags:
    - immersive
  when: always
  script: "mvn package -B -f ./api-gateway/ -DskipTests"

#Build job user-service project to make sure no compile errors
build_userservice-build:
  stage: stage::build
  tags:
    - immersive
  when: always
  script: "mvn package -B -f ./user-service/ -DskipTests"

#Build job campaign-service project to make sure no compile errors
build_campaignservice-build:
  stage: stage::build
  tags:
    - immersive
  when: always
  script: "mvn package -B -f ./campaign-service/ -DskipTests"

#Build job vehicle-service project to make sure no compile errors
build_vehicleservice-build:
  stage: stage::build
  tags:
    - immersive
  when: always
  script: "mvn package -B -f ./vehicle-service/ -DskipTests"

#Build job zone-service project to make sure no compile errors
build_zoneservice-build:
  stage: stage::build
  tags:
    - immersive
  when: always
  script: "mvn package -B -f ./zone-service/ -DskipTests"

#Build job booking-service project to make sure no compile errors
build_bookingservice-build:
  stage: stage::build
  tags:
    - immersive
  when: always
  script: "mvn package -B -f ./booking-service/ -DskipTests"

#Build job report-service project to make sure no compile errors
build_reportservice-build:
  stage: stage::build
  tags:
    - immersive
  when: always
  script: "mvn package -B -f ./report-service/ -DskipTests"

#UI build verification to make sure no compile errors
build_ui-build:
  stage: stage::build
  tags:
    - immersive
  script:
    - npm install
    - npm run build
  when: always

#UI lint issues check
tslint_ui-lint-codequality:
  stage: lint
  when: always
  tags:
    - immersive
  script:
    - echo $TSLINT > tslint.json
    - npm install
    - npm run lint -- --format json

# UI code coverage check and report generation
karma_ui-codecoverage:
  stage: tests
  when: always
  tags:
    - immersive
  script:
    - echo $KARMA > karma-extend.conf.js
    - npm install --save karma-junit-reporter jasmine-reporters
    - npm run test -- --karma-config=./karma-extend.conf.js

# Backend code quality check using pmd
pmd_backend-codequality-pmd:
  stage: lint
  when: always
  tags:
    - immersive
  script:
    - echo $PMD > pumdRules.xml
    - "mvn pmd:check"

# Backend code quality check using checkstyle
checkstyle_backend-codequality-checkstyle:
  tags:
    - immersive
  stage: lint
  when: always
  script: "mvn checkstyle:check -Dcheckstyle.skip"

# Backend code quality check using findbugs
findbugs_backend-codequality-findbugs:
  tags:
    - immersive
  stage: tests
  when: always
  # Verify for any potential bugs in the code using findbugs maven plug-in
  script: "mvn findbugs:check"

# Backend code quality check using findbugs
jococo_backend-codecoverage-jacoco:
  tags:
    - immersive
  stage: tests
  when: always
  # check for code coverate using jacoco maven plug-in
  script: "mvn jacoco:check"

# Backend config-server unit and repository integration tests (with database)
junit_configserver-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script: "mvn test -B -f ./config-server/"

# Backend discovery-service unit and repository integration tests (with database)
junit_discoveryservice-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script: "mvn test -B -f ./discovery-service/"

# Backend api-gateway unit and repository integration tests (with database)
junit_apigateway-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script: "mvn test -B -f ./api-gateway/"

# Backend user-service unit and repository integration tests (with database)
junit_userservice-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script: "mvn test -B -f ./user-service/"

# Backend vehicle-service unit and repository integration tests (with database)
junit_vehicleservice-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script: "mvn test -B -f ./vehicle-service/"

# Backend zone-service unit and repository integration tests (with database)
junit_zoneservice-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script: "mvn test -B -f ./zone-service/"

# Backend booking-service unit and repository integration tests (with database)
junit_bookingservice-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script: "mvn test -B -f ./booking-service/"

# Backend report-service unit and repository integration tests (with database)
junit_reportservice-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script: "mvn test -B -f ./report-service/"

# Backend campaign-service unit and repository integration tests (with database)
junit_campaignservice-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script: "mvn test -B -f ./campaign-service/"

# UI unit tests verification
karma_ui-unittest:
  stage: tests
  when: always
  tags:
    - immersive
  script:
    - echo $KARMA > karma-extend.conf.js
    - npm install
    - npm install --save karma-junit-reporter jasmine-reporters
    - npm run test -- --karma-config=./karma-extend.conf.js

#UI integration tests verification
protractor_ui-e2etest:
  stage: tests
  when: always
  tags:
    - immersive
  before_script:
    - echo $PROTRACTOR > ./protractor-extend.conf.js
    - npm install --save karma-junit-reporter jasmine-reporters
    - mvn package -DskipTests
    - java -jar ./config-server/target/config-server.jar & sleep 10 &
    - java -jar ./discovery-service/target/discovery-service.jar & sleep 10 &
    - java -jar ./api-gateway/target/api-gateway.jar & sleep 10 &
    - java -jar ./user-service/target/user-service.jar & sleep 10 &
    - java -jar ./vehicle-service/target/vehicle-service.jar & sleep 10 &
    - java -jar ./zone-service/target/zone-service.jar & sleep 10 &
    - java -jar ./booking-service/target/booking-service.jar & sleep 10 &
    - java -jar ./report-service/target/report-service.jar & sleep 10 &
    - java -jar ./campaign-service/target/campaign-service.jar & sleep 10 &
  script: npm run e2e -- --protractor-config=./protractor-extend.conf.js
